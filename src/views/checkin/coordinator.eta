<% layout('../layout', { title: 'Панель координатора - VolunteerHub' }) %>

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" x-data="coordinatorPanel()">
  <!-- Header -->
  <div class="mb-8">
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-slate-900 mb-2">
          <%= it.event?.title || 'Управление событием' %>
        </h1>
        <p class="text-slate-600">Панель координатора для управления участниками</p>
      </div>
      <div class="flex space-x-3">
        <a href="/events/<%= it.event?.id || 1 %>/kiosk" target="_blank" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium transition-colors inline-flex items-center">
          <i data-lucide="monitor" class="w-4 h-4 mr-2"></i>
          Открыть киоск
        </a>
        <button
          onclick="openIncidentModal()"
          class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md font-medium transition-colors inline-flex items-center">
          <i data-lucide="alert-triangle" class="w-4 h-4 mr-2"></i>
          Инцидент
        </button>
        <button
          @click="refreshData()"
          class="border border-slate-300 hover:bg-slate-50 text-slate-700 px-4 py-2 rounded-md font-medium transition-colors inline-flex items-center"
        >
          <i data-lucide="refresh-cw" class="w-4 h-4 mr-2" :class="{ 'animate-spin': loading }"></i>
          Обновить
        </button>
      </div>
    </div>
  </div>

  <!-- Event Status Bar -->
  <div class="bg-white rounded-xl shadow-sm border border-slate-200 p-6 mb-8">
    <div class="grid grid-cols-1 md:grid-cols-5 gap-6">
      <div class="text-center">
        <div class="text-2xl font-bold text-blue-600" x-text="stats.registered">0</div>
        <div class="text-sm text-slate-600">Зарегистрировано</div>
      </div>
      <div class="text-center">
        <div class="text-2xl font-bold text-green-600" x-text="stats.checkedIn">0</div>
        <div class="text-sm text-slate-600">На месте</div>
      </div>
      <div class="text-center">
        <div class="text-2xl font-bold text-orange-600" x-text="stats.checkedOut">0</div>
        <div class="text-sm text-slate-600">Ушли</div>
      </div>
      <div class="text-center">
        <div class="text-2xl font-bold text-red-600" x-text="stats.noShow">0</div>
        <div class="text-sm text-slate-600">Не пришли</div>
      </div>
      <div class="text-center">
        <div class="text-2xl font-bold text-purple-600" x-text="stats.waitlist">0</div>
        <div class="text-sm text-slate-600">В очереди</div>
      </div>
    </div>
  </div>

  <!-- Filters and Search -->
  <div class="bg-white rounded-xl shadow-sm border border-slate-200 p-6 mb-8">
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
      <div>
        <label class="block text-sm font-medium text-slate-700 mb-2">Роль</label>
        <select x-model="filters.role" @change="applyFilters()" class="w-full p-2 border border-slate-300 rounded-md">
          <option value="">Все роли</option>
          <option value="dog-care">Уход за собаками</option>
          <option value="cat-care">Уход за кошками</option>
          <option value="cleaning">Уборка территории</option>
        </select>
      </div>
      
      <div>
        <label class="block text-sm font-medium text-slate-700 mb-2">Смена</label>
        <select x-model="filters.shift" @change="applyFilters()" class="w-full p-2 border border-slate-300 rounded-md">
          <option value="">Все смены</option>
          <option value="morning">Утренняя (09:00-13:00)</option>
          <option value="afternoon">Дневная (13:00-17:00)</option>
        </select>
      </div>
      
      <div>
        <label class="block text-sm font-medium text-slate-700 mb-2">Статус</label>
        <select x-model="filters.status" @change="applyFilters()" class="w-full p-2 border border-slate-300 rounded-md">
          <option value="">Все статусы</option>
          <option value="registered">Зарегистрирован</option>
          <option value="checked_in">На месте</option>
          <option value="checked_out">Ушёл</option>
          <option value="no_show">Не пришёл</option>
        </select>
      </div>
      
      <div>
        <label class="block text-sm font-medium text-slate-700 mb-2">Поиск</label>
        <input 
          type="text" 
          x-model="filters.search" 
          @input="applyFilters()" 
          placeholder="Имя волонтёра..." 
          class="w-full p-2 border border-slate-300 rounded-md"
        >
      </div>
    </div>
  </div>

  <!-- Volunteers Table -->
  <div class="bg-white rounded-xl shadow-sm border border-slate-200 overflow-hidden">
    <div class="px-6 py-4 border-b border-slate-200 flex items-center justify-between">
      <h2 class="text-xl font-semibold text-slate-900">
        Участники (<span x-text="filteredVolunteers.length">0</span>)
      </h2>
      <div class="flex space-x-2">
        <button 
          @click="bulkCheckin()" 
          :disabled="selectedVolunteers.length === 0"
          class="bg-green-600 hover:bg-green-700 disabled:opacity-50 text-white px-3 py-2 rounded text-sm font-medium transition-colors"
        >
          Чекин выбранных
        </button>
        <button 
          @click="bulkCheckout()" 
          :disabled="selectedVolunteers.length === 0"
          class="bg-orange-600 hover:bg-orange-700 disabled:opacity-50 text-white px-3 py-2 rounded text-sm font-medium transition-colors"
        >
          Чекаут выбранных
        </button>
      </div>
    </div>

    <div class="overflow-x-auto">
      <table class="w-full">
        <thead class="bg-slate-50">
          <tr>
            <th class="text-left py-3 px-4">
              <input 
                type="checkbox" 
                @change="toggleSelectAll()" 
                :checked="allSelected"
                class="rounded border-slate-300"
              >
            </th>
            <th class="text-left py-3 px-4 font-semibold text-slate-700">Волонтёр</th>
            <th class="text-left py-3 px-4 font-semibold text-slate-700">Роль</th>
            <th class="text-left py-3 px-4 font-semibold text-slate-700">Смена</th>
            <th class="text-left py-3 px-4 font-semibold text-slate-700">Статус</th>
            <th class="text-left py-3 px-4 font-semibold text-slate-700">Время</th>
            <th class="text-right py-3 px-4 font-semibold text-slate-700">Действия</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-slate-200">
          <template x-for="volunteer in filteredVolunteers" :key="volunteer.id">
            <tr class="hover:bg-slate-50 transition-colors">
              <td class="py-4 px-4">
                <input 
                  type="checkbox" 
                  x-model="selectedVolunteers" 
                  :value="volunteer.id"
                  class="rounded border-slate-300"
                >
              </td>
              <td class="py-4 px-4">
                <div>
                  <p class="font-medium text-slate-900" x-text="volunteer.name"></p>
                  <p class="text-sm text-slate-600" x-text="volunteer.email"></p>
                  <p class="text-sm text-slate-500" x-text="volunteer.phone"></p>
                </div>
              </td>
              <td class="py-4 px-4">
                <p class="text-slate-900" x-text="volunteer.role"></p>
              </td>
              <td class="py-4 px-4">
                <p class="text-sm text-slate-600" x-text="volunteer.shift"></p>
              </td>
              <td class="py-4 px-4">
                <div class="space-y-1">
                  <!-- Статус заявки -->
                  <span 
                    class="px-2 py-1 rounded-full text-xs font-medium"
                    :class="{
                      'bg-blue-100 text-blue-800': volunteer.application_status === 'waitlisted',
                      'bg-green-100 text-green-800': volunteer.application_status === 'approved',
                      'bg-yellow-100 text-yellow-800': volunteer.application_status === 'pending',
                      'bg-red-100 text-red-800': volunteer.application_status === 'declined'
                    }"
                    x-text="getApplicationStatusText(volunteer.application_status)"
                  ></span>
                  
                  <!-- Статус посещения (только для одобренных) -->
                  <span 
                    x-show="volunteer.application_status === 'approved'"
                    class="px-2 py-1 rounded-full text-xs font-medium"
                    :class="{
                      'bg-slate-100 text-slate-800': volunteer.status === 'registered',
                      'bg-green-100 text-green-800': volunteer.status === 'checked_in',
                      'bg-orange-100 text-orange-800': volunteer.status === 'checked_out',
                      'bg-red-100 text-red-800': volunteer.status === 'no_show'
                    }"
                    x-text="getStatusText(volunteer.status)"
                  ></span>
                </div>
              </td>
              <td class="py-4 px-4">
                <div class="text-sm text-slate-600">
                  <div x-show="volunteer.checkin_time">
                    Пришёл: <span x-text="volunteer.checkin_time"></span>
                  </div>
                  <div x-show="volunteer.checkout_time">
                    Ушёл: <span x-text="volunteer.checkout_time"></span>
                  </div>
                </div>
              </td>
              <td class="py-4 px-4 text-right">
                <div class="flex justify-end space-x-2">
                  <!-- Кнопки для waitlisted заявок -->
                  <button 
                    x-show="volunteer.application_status === 'waitlisted'"
                    @click="approveFromWaitlist(volunteer)"
                    class="bg-emerald-600 hover:bg-emerald-700 text-white px-2 py-1 rounded text-xs font-medium transition-colors"
                    title="Одобрить из очереди"
                  >
                    <i data-lucide="user-check" class="w-3 h-3"></i>
                  </button>
                  
                  <!-- Кнопки для одобренных заявок -->
                  <button 
                    x-show="volunteer.application_status === 'approved' && volunteer.status === 'registered'"
                    @click="checkinVolunteer(volunteer)"
                    class="bg-green-600 hover:bg-green-700 text-white px-2 py-1 rounded text-xs font-medium transition-colors"
                    title="Чекин"
                  >
                    <i data-lucide="log-in" class="w-3 h-3"></i>
                  </button>
                  <button 
                    x-show="volunteer.application_status === 'approved' && volunteer.status === 'checked_in'"
                    @click="checkoutVolunteer(volunteer)"
                    class="bg-orange-600 hover:bg-orange-700 text-white px-2 py-1 rounded text-xs font-medium transition-colors"
                    title="Чекаут"
                  >
                    <i data-lucide="log-out" class="w-3 h-3"></i>
                  </button>
                  <button 
                    x-show="volunteer.application_status === 'approved' && volunteer.status === 'registered'"
                    @click="markNoShow(volunteer)"
                    class="bg-red-600 hover:bg-red-700 text-white px-2 py-1 rounded text-xs font-medium transition-colors"
                    title="Не пришёл"
                  >
                    <i data-lucide="user-x" class="w-3 h-3"></i>
                  </button>
                  
                  <!-- Общие кнопки -->
                  <button 
                    @click="showVolunteerDetails(volunteer)"
                    class="bg-slate-600 hover:bg-slate-700 text-white px-2 py-1 rounded text-xs font-medium transition-colors"
                    title="Подробнее"
                  >
                    <i data-lucide="eye" class="w-3 h-3"></i>
                  </button>
                </div>
              </td>
            </tr>
          </template>
        </tbody>
      </table>
    </div>

    <!-- Empty State -->
    <div x-show="filteredVolunteers.length === 0" class="text-center py-12">
      <div class="w-24 h-24 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
        <i data-lucide="users" class="w-12 h-12 text-slate-400"></i>
      </div>
      <h3 class="text-xl font-semibold text-slate-900 mb-2">Участников не найдено</h3>
      <p class="text-slate-600">Попробуйте изменить фильтры или проверьте регистрацию</p>
    </div>
  </div>

  <!-- Quick Actions -->
  <div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
    <div class="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
      <h3 class="text-lg font-semibold text-slate-900 mb-4">Быстрые действия</h3>
      <div class="space-y-3">
        <button 
          @click="startBulkCheckin()"
          class="w-full bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md font-medium transition-colors"
        >
          Массовый чекин
        </button>
        <button 
          @click="exportReport()"
          class="w-full border border-slate-300 hover:bg-slate-50 text-slate-700 px-4 py-2 rounded-md font-medium transition-colors"
        >
          Экспорт отчёта
        </button>
        <button 
          @click="sendReminders()"
          class="w-full border border-slate-300 hover:bg-slate-50 text-slate-700 px-4 py-2 rounded-md font-medium transition-colors"
        >
          Отправить напоминания
        </button>
      </div>
  </div>

  <div class="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
      <h3 class="text-lg font-semibold text-slate-900 mb-4">Статистика смен</h3>
      <div class="space-y-3">
        <div class="flex justify-between">
          <span class="text-slate-600">Утренняя смена</span>
          <span class="font-medium">12/15</span>
        </div>
        <div class="flex justify-between">
          <span class="text-slate-600">Дневная смена</span>
          <span class="font-medium">8/10</span>
        </div>
        <div class="flex justify-between">
          <span class="text-slate-600">Общая явка</span>
          <span class="font-medium text-green-600">80%</span>
        </div>
      </div>
    </div>

    <div class="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
      <h3 class="text-lg font-semibold text-slate-900 mb-4">Уведомления</h3>
      <div class="space-y-3">
        <div class="flex items-center space-x-3">
          <div class="w-2 h-2 bg-green-500 rounded-full"></div>
          <span class="text-sm text-slate-600">Анна зарегистрировалась</span>
        </div>
        <div class="flex items-center space-x-3">
          <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
          <span class="text-sm text-slate-600">Иван подтвердил участие в TG</span>
        </div>
        <div class="flex items-center space-x-3">
          <div class="w-2 h-2 bg-orange-500 rounded-full"></div>
          <span class="text-sm text-slate-600">Мария опаздывает на 15 мин</span>
        </div>
      </div>
    </div>
  </div>
</div>
<%~ include('../components/incident-modal') %>

<script>
  const EVENT_ID = <%= it.event?.id || 0 %>;
  window.currentEventId = EVENT_ID;
  window.currentUserId = 1;

  function coordinatorPanel() {
    return {
      loading: false,
      volunteers: <%- JSON.stringify(it.volunteers || []) %>,
      filteredVolunteers: [],
      selectedVolunteers: [],
      filters: {
        role: '',
        shift: '',
        status: '',
        search: ''
      },
      stats: {
        registered: 0,
        checkedIn: 0,
        checkedOut: 0,
        noShow: 0,
        waitlist: 0
      },

      init() {
        this.applyFilters();
        this.updateStats();
        lucide.createIcons();
      },

      applyFilters() {
        let filtered = this.volunteers;

        if (this.filters.role) {
          filtered = filtered.filter(v => v.role.includes(this.filters.role));
        }

        if (this.filters.shift) {
          filtered = filtered.filter(v => v.shift.includes(this.filters.shift));
        }

        if (this.filters.status) {
          filtered = filtered.filter(v => v.status === this.filters.status);
        }

        if (this.filters.search) {
          const search = this.filters.search.toLowerCase();
          filtered = filtered.filter(v => 
            v.name.toLowerCase().includes(search) ||
            v.email.toLowerCase().includes(search)
          );
        }

        this.filteredVolunteers = filtered;
      },

      updateStats() {
        this.stats = {
          registered: this.volunteers.filter(v => v.application_status === 'approved' && v.status === 'registered').length,
          checkedIn: this.volunteers.filter(v => v.status === 'checked_in').length,
          checkedOut: this.volunteers.filter(v => v.status === 'checked_out').length,
          noShow: this.volunteers.filter(v => v.status === 'no_show').length,
          waitlist: this.volunteers.filter(v => v.application_status === 'waitlisted').length
        };
      },

      get allSelected() {
        return this.filteredVolunteers.length > 0 && 
               this.selectedVolunteers.length === this.filteredVolunteers.length;
      },

      toggleSelectAll() {
        if (this.allSelected) {
          this.selectedVolunteers = [];
        } else {
          this.selectedVolunteers = this.filteredVolunteers.map(v => v.id);
        }
      },

      getStatusText(status) {
        const statusTexts = {
          'registered': 'Зарегистрирован',
          'checked_in': 'На месте',
          'checked_out': 'Ушёл',
          'no_show': 'Не пришёл'
        };
        return statusTexts[status] || status;
      },

      getApplicationStatusText(status) {
        const statusTexts = {
          'pending': 'На рассмотрении',
          'approved': 'Одобрена',
          'waitlisted': 'В очереди',
          'declined': 'Отклонена'
        };
        return statusTexts[status] || status;
      },

      checkinVolunteer(volunteer) {
        fetch(`/events/${EVENT_ID}/live/checkin`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ application_id: volunteer.id })
        }).then(r => r.json()).then(res => {
          if (res.success) {
            volunteer.status = 'checked_in';
            volunteer.checkin_time = new Date().toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
            this.updateStats();
            showToast(`${volunteer.name} зарегистрирован`, 'success');
            trackEvent('checkin_success', { event_id: EVENT_ID, volunteer_id: volunteer.id });
          } else {
            showToast('Ошибка чекина', 'error');
          }
        });
      },

      checkoutVolunteer(volunteer) {
        fetch(`/events/${EVENT_ID}/live/checkout`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ application_id: volunteer.id })
        }).then(r => r.json()).then(res => {
          if (res.success) {
            volunteer.status = 'checked_out';
            volunteer.checkout_time = new Date().toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
            this.updateStats();
            showToast(`${volunteer.name} завершил работу`, 'success');
            trackEvent('checkout_success', { event_id: EVENT_ID, volunteer_id: volunteer.id });
          } else {
            showToast('Ошибка чекаута', 'error');
          }
        });
      },

      markNoShow(volunteer) {
        if (confirm(`Отметить ${volunteer.name} как не пришедшего?`)) {
          volunteer.status = 'no_show';
          this.updateStats();
          showToast(`${volunteer.name} отмечен как не пришедший`, 'info');
        }
      },

      bulkCheckin() {
        const selected = this.volunteers.filter(v => this.selectedVolunteers.includes(v.id));
        Promise.all(selected.map(v => {
          if (v.status === 'registered') {
            return fetch(`/events/${EVENT_ID}/live/checkin`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ application_id: v.id })
            }).then(r => r.json()).then(res => {
              if (res.success) {
                v.status = 'checked_in';
                v.checkin_time = new Date().toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
                trackEvent('checkin_success', { event_id: EVENT_ID, volunteer_id: v.id });
              }
            });
          }
        })).then(() => {
          this.updateStats();
          this.selectedVolunteers = [];
          showToast(`${selected.length} волонтёров зарегистрировано`, 'success');
        });
      },

      bulkCheckout() {
        const selected = this.volunteers.filter(v => this.selectedVolunteers.includes(v.id));
        Promise.all(selected.map(v => {
          if (v.status === 'checked_in') {
            return fetch(`/events/${EVENT_ID}/live/checkout`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ application_id: v.id })
            }).then(r => r.json()).then(res => {
              if (res.success) {
                v.status = 'checked_out';
                v.checkout_time = new Date().toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
                trackEvent('checkout_success', { event_id: EVENT_ID, volunteer_id: v.id });
              }
            });
          }
        })).then(() => {
          this.updateStats();
          this.selectedVolunteers = [];
          showToast(`${selected.length} волонтёров завершили работу`, 'success');
        });
      },

      refreshData() {
        this.loading = true;
        // Simulate API call
        setTimeout(() => {
          this.loading = false;
          showToast('Данные обновлены', 'success');
        }, 1000);
      },

      async approveFromWaitlist(volunteer) {
        try {
          const response = await fetch(`/org/1/applications/${volunteer.id}/status`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status: 'approved' })
          });
          
          const result = await response.json();
          if (result.success) {
            volunteer.application_status = 'approved';
            volunteer.status = 'registered';
            this.updateStats();
            showToast(`${volunteer.name} одобрен из очереди`, 'success');
          } else {
            showToast('Ошибка при одобрении заявки', 'error');
          }
        } catch (error) {
          console.error('Error approving from waitlist:', error);
          showToast('Ошибка при одобрении заявки', 'error');
        }
      },

      showVolunteerDetails(volunteer) {
        showToast('Детали волонтёра - в разработке', 'info');
      },

      startBulkCheckin() {
        showToast('Массовый чекин - в разработке', 'info');
      },

      exportReport() {
        showToast('Экспорт отчёта - в разработке', 'info');
      },

      sendReminders() {
        showToast('Отправка напоминаний - в разработке', 'info');
      }
    }
  }
</script>
