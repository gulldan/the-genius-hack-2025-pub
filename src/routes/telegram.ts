import type { Elysia } from "elysia";
import {
        TELEGRAM_ENABLED,
        sendTelegramMessage,
        TelegramTemplates,
        generateTelegramDeepLink,
        pendingCheckins,
        calculateDistance,
} from "../lib/telegram.ts";
import {
        getUserByTelegramId,
        applicationById,
        updateAttendance,
        createAttendance,
        attendanceByApplication,
        db,
        checkoutAttendance,
} from "../sql/queries.ts";
import {
        notifyCheckinSuccess,
        scheduleCheckoutReminder,
        notifyShiftCompleted,
} from "../lib/notifications.ts";
import { updateApplicationStatus } from "../lib/applications.ts";

export const telegramRoutes = (app: Elysia) =>
	app
		// Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram –±–æ—Ç–∞
		.post("/webhook/telegram", async ({ body }) => {
			if (!TELEGRAM_ENABLED) {
				console.log("üì± [MOCK] Telegram webhook:", body);
				return { ok: true };
			}

			const update = body as any;

			try {
				if (update.message) {
					await handleMessage(update.message);
				} else if (update.callback_query) {
					await handleCallbackQuery(update.callback_query);
				}

				return { ok: true };
			} catch (error) {
				console.error("Telegram webhook error:", error);
				return { ok: false, error: error.message };
			}
		})

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
		.post("/api/notifications/test", async ({ body }) => {
			const { type, user_id, data } = body as any;

			const user = db.query("SELECT * FROM users WHERE id = ?").get(user_id);
			if (!user || !user.telegram_user_id) {
				return {
					success: false,
					error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω",
				};
			}

			let message;
			switch (type) {
				case "application_confirmed":
					message = TelegramTemplates.applicationConfirmation(
						data.event_title,
						data.role_title,
						data.shift_time,
					);
					break;

				case "shift_reminder":
					message = TelegramTemplates.shiftReminder(
						data.event_title,
						data.role_title,
						data.shift_time,
						data.checkin_link,
					);
					break;

				case "checkin_success":
					message = TelegramTemplates.checkinSuccess(
						data.event_title,
						data.hours_expected,
					);
					break;

				case "checkout_request":
					message = TelegramTemplates.checkoutRequest(
						data.event_title,
						data.hours_worked,
					);
					break;

				default:
					return { success: false, error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" };
			}

			const sent = await sendTelegramMessage(user.telegram_user_id, message);
			return { success: sent };
		})

		// Deep link –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                .get("/tg/start/:payload", ({ params }) => {
                        const payload = params.payload;
                        console.log("üì± Telegram start payload:", payload);

                        // –ü–∞—Ä—Å–∏–º payload
                        if (payload.startsWith("EVT_")) {
                                const eventId = payload.replace("EVT_", "");
				return new Response(null, {
					status: 302,
					headers: { Location: `/events/${eventId}` },
				});
			} else if (payload.startsWith("SHF_")) {
				const shiftId = payload.replace("SHF_", "");
				return new Response(null, {
					status: 302,
					headers: { Location: `/shifts/${shiftId}/checkin` },
				});
                        } else if (payload.startsWith("CHECKIN_")) {
                                const token = decodeURIComponent(
                                        payload.replace("CHECKIN_", ""),
                                );
                                return new Response(null, {
                                        status: 302,
                                        headers: { Location: `/checkin/token/${token}` },
                                });
                        }

			return new Response(null, {
				status: 302,
				headers: { Location: "/" },
			});
		});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(message: any) {
        const chatId = message.chat.id;
        const text = message.text;
        const userId = message.from.id;

        if (message.location) {
                const pending = pendingCheckins.get(userId);
                if (pending) {
                        const distance = calculateDistance(
                                pending.geofence.lat,
                                pending.geofence.lon,
                                message.location.latitude,
                                message.location.longitude,
                        );
                        if (distance > pending.geofence.radius) {
                                await sendTelegramMessage(chatId, {
                                        text: "–í—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –∑–æ–Ω—ã",
                                });
                                pendingCheckins.delete(userId);
                                return;
                        }
                        const existing = attendanceByApplication.get(
                                pending.applicationId,
                        );
                        if (existing?.status === "checked_in") {
                                await sendTelegramMessage(chatId, {
                                        text: "–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã",
                                });
                                pendingCheckins.delete(userId);
                                return;
                        }
                        if (existing) {
                                updateAttendance.run(
                                        pending.applicationId,
                                        "checked_in",
                                        new Date().toISOString(),
                                        "telegram",
                                        `${message.location.latitude},${message.location.longitude}`,
                                );
                        } else {
                                createAttendance.run(
                                        pending.applicationId,
                                        pending.shiftId,
                                        "checked_in",
                                        "telegram",
                                        `${message.location.latitude},${message.location.longitude}`,
                                );
                        }
                        await notifyCheckinSuccess(
                                Number(pending.applicationId),
                        );
                        await scheduleCheckoutReminder(
                                Number(pending.applicationId),
                        );
                        pendingCheckins.delete(userId);
                        return;
                }
        }

        console.log("üì± [MOCK] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", { chatId, text, userId });

	// –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	const user = getUserByTelegramId.get(userId);
	if (!user) {
		await sendTelegramMessage(chatId, {
			text: "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç —á–µ—Ä–µ–∑ Telegram: https://volunteerhub.example.com/login",
		});
		return;
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (text === "/start") {
		await sendTelegramMessage(chatId, {
			text: `–ü—Ä–∏–≤–µ—Ç, ${user.name}! üëã\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`,
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: "üîç –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏—è",
							url: "https://volunteerhub.example.com/events",
						},
						{
							text: "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
							url: "https://volunteerhub.example.com/account",
						},
					],
					[
						{
							text: "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
							web_app: { url: "https://volunteerhub.example.com/" },
						},
					],
				],
			},
		});
        } else if (text === "/myevents") {
		// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const applications = db
			.query(`
      SELECT e.title, r.title as role_title, s.start_time, s.end_time
      FROM applications a
      JOIN events e ON a.event_id = e.id
      JOIN roles r ON a.role_id = r.id
      JOIN shifts s ON a.shift_id = s.id
      WHERE a.user_id = ? AND e.start_date >= date('now') AND a.status = 'approved'
      ORDER BY e.start_date
      LIMIT 5
    `)
			.all(user.id);

		if (applications.length > 0) {
			let text = "üìÖ –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n";
			applications.forEach((app, index) => {
				text += `${index + 1}. ${app.title}\n`;
				text += `   –†–æ–ª—å: ${app.role_title}\n`;
				text += `   –í—Ä–µ–º—è: ${app.start_time} - ${app.end_time}\n\n`;
			});

			await sendTelegramMessage(chatId, { text });
                } else {
			await sendTelegramMessage(chatId, {
				text: "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\nüîç –ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ!",
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "üîç –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏—è",
								url: "https://volunteerhub.example.com/events",
							},
						],
					],
				},
			});
                }
        } else if (text === "/help") {
                await sendTelegramMessage(chatId, {
                        text:
                                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/myevents - –º–æ–∏ —Å–æ–±—ã—Ç–∏—è\n/help - –ø–æ–º–æ—â—å",
                });
        } else if (text === "/checkin" && user.roles?.includes("coordinator")) {
                await sendTelegramMessage(chatId, {
                        text: "–û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: https://volunteerhub.example.com/events",
                });
        } else if (text === "/roster" && user.roles?.includes("coordinator")) {
                await sendTelegramMessage(chatId, {
                        text: "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞.",
                });
        } else {
                // –û–±—â–∏–π –æ—Ç–≤–µ—Ç
                await sendTelegramMessage(chatId, {
                        text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                });
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
async function handleCallbackQuery(callbackQuery: any) {
	const chatId = callbackQuery.message.chat.id;
        const data = callbackQuery.data;
        const userId = callbackQuery.from.id;

	console.log("üì± [MOCK] Callback query:", { chatId, data, userId });

	const user = getUserByTelegramId.get(userId);
	if (!user) {
		return;
	}

        const [action, id] = String(data).split(":");

        switch (action) {
                case "confirm_attendance":
                        if (id) updateApplicationStatus(Number(id), "approved");
                        await sendTelegramMessage(chatId, {
                                text: "‚úÖ –£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –£–≤–∏–¥–∏–º—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.",
                        });
                        break;

                case "cancel_attendance":
                        if (id) updateApplicationStatus(Number(id), "cancelled");
                        await sendTelegramMessage(chatId, {
                                text: "üòî –ñ–∞–ª—å, —á—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏. –ú—ã –Ω–∞–π–¥—ë–º –∑–∞–º–µ–Ω—É –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è.",
                        });
                        break;

                case "checkout_confirm":
                        if (id) {
                                const app = applicationById.get(id);
                                if (app) {
                                        const start = new Date(app.start_time);
                                        const hours =
                                                (Date.now() - start.getTime()) /
                                                3_600_000;
                                        checkoutAttendance.run(id, hours);
                                        await notifyShiftCompleted(Number(id), hours);
                                }
                        }
                        await sendTelegramMessage(chatId, {
                                text: "‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É! üôè\n\n–í–∞—à–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏–µ —á–∞—Å—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º.",
                        });
                        break;

                case "extend_shift":
                        if (id) await scheduleCheckoutReminder(Number(id));
                        await sendTelegramMessage(chatId, {
                                text: "‚è∞ –•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å.",
                        });
                        break;

                case "add_calendar":
                        await sendTelegramMessage(chatId, {
                                text: "üìÖ –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n–ü–æ–∫–∞ —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞—Ç—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!",
                        });
                        break;

		case "event_details":
			await sendTelegramMessage(chatId, {
				text: "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ.",
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ",
								url: "https://volunteerhub.example.com/events/1",
							},
						],
					],
				},
			});
			break;

                default:
                        console.log("Unknown callback data:", data);
        }

	// –û—Ç–≤–µ—Ç –Ω–∞ callback query
	await fetch(
		`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`,
		{
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({
				callback_query_id: callbackQuery.id,
				text: "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
			}),
		},
	);
}
