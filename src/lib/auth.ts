import { db } from "../sql/queries.ts";

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ cookie
 */
export function getCurrentUser(headers?: Record<string, string> | Headers) {
	let cookieHeader: string | null = null;

	if (headers instanceof Headers) {
		cookieHeader = headers.get("cookie");
	} else {
		cookieHeader = headers?.cookie || null;
	}

	if (!cookieHeader) return null;

	const match = cookieHeader.match(/(?:^|;\s*)user_id=(\d+)/);
	if (!match) return null;

	const userId = Number(match[1]);
	if (!userId) return null;

	const user = db.query("SELECT * FROM users WHERE id = ?").get(userId);
	if (!user) return null;

	if (user.roles) {
		try {
			user.roles = JSON.parse(user.roles);
		} catch {
			user.roles = ["volunteer"];
		}
	}

	console.log("üîê Current user:", {
		id: user.id,
		name: user.name,
		roles: user.roles,
	});

	return user;
}

/**
 * Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
 */
export function withAuth(templateData: any, headers?: Record<string, string>) {
	const user = getCurrentUser(headers);
	return {
		...templateData,
		user,
	};
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function hasRole(user: any, role: string): boolean {
	if (!user || !user.roles) return false;

	const roles = Array.isArray(user.roles)
		? user.roles
		: JSON.parse(user.roles || "[]");
	return roles.includes(role);
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
 */
export function requireRoles(roles: string[], handler: any) {
	return (ctx: any) => {
		const user = getCurrentUser(ctx.headers);
		if (!user) {
			return new Response(null, {
				status: 302,
				headers: { Location: "/login" },
			});
		}

		const allowed = roles.some((r) => hasRole(user, r));
		if (!allowed) {
			return new Response("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", { status: 403 });
		}

		return handler(ctx);
	};
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export function canAccessOrganization(user: any, orgId: number): boolean {
	if (!user) return false;

	console.log("üîê Checking org access:", {
		userId: user.id,
		orgId,
		roles: user.roles,
	});

	// –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	return true; // –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è –¥–µ–º–æ
}
