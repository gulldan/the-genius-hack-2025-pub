import { Elysia } from "elysia";
import { accountRoutes } from "./routes/account.ts";
import { analyticsRoutes } from "./routes/analytics.ts";
import { authRoutes } from "./routes/auth.ts";
import { checkinRoutes } from "./routes/checkin.ts";
import { coordinatorRoutes } from "./routes/coordinator.ts";
import { eventsRoutes } from "./routes/events.ts";
import { incidentRoutes } from "./routes/incidents.ts";
import { organizerRoutes } from "./routes/organizer.ts";
import { pagesRoutes } from "./routes/pages.ts";
import { telegramRoutes } from "./routes/telegram.ts";
import { runReminderCron } from "../scripts/reminder-cron.ts";

const port = Number(process.env.PORT) || 3000;

new Elysia()
	.use(eventsRoutes)
	.use(accountRoutes)
	.use(organizerRoutes)
	.use(coordinatorRoutes)
	.use(authRoutes)
	.use(checkinRoutes)
	.use(telegramRoutes)
	.use(analyticsRoutes)
	.use(incidentRoutes)
	.use(pagesRoutes)
	.get(
		"/style.css",
		() =>
			new Response(Bun.file("public/style.css"), {
				headers: { "Content-Type": "text/css; charset=utf-8" },
			}),
	)
	.get(
		"/manifest.json",
		() =>
			new Response(Bun.file("public/manifest.json"), {
				headers: { "Content-Type": "application/json" },
			}),
	)
	.get(
		"/uploads/:file",
		({ params }) => new Response(Bun.file(`public/uploads/${params.file}`)),
	)
	.listen(port);

console.log(`Server running on http://localhost:${port}`);

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
if (process.env.NODE_ENV !== "test") {
	console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");
	
	// –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
	setTimeout(() => runReminderCron(), 5000); // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
	
	// –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
	setInterval(() => {
		runReminderCron().catch(error => {
			console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
		});
	}, 15 * 60 * 1000); // 15 –º–∏–Ω—É—Ç
	
	console.log("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 15 –º–∏–Ω—É—Ç)");
}
