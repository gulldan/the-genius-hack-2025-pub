#!/usr/bin/env bun
/**
 * Cron-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
 */

import { Database } from "bun:sqlite";
import { sendNotification } from "../src/lib/notifications.ts";

const db = new Database("volunteer.db");

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
 */
async function send24HourReminders(): Promise<void> {
  console.log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞...");

  const now = new Date();
  const in24Hours = new Date(now.getTime() + 24 * 60 * 60 * 1000);
  const in24HoursPlus15Min = new Date(in24Hours.getTime() + 15 * 60 * 1000);

  // –ù–∞—Ö–æ–¥–∏–º —Å–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ (¬±15 –º–∏–Ω—É—Ç)
  const applications = db.query(`
    SELECT a.id, a.user_id, a.event_id, a.shift_id,
           u.telegram_user_id, u.notifications_telegram,
           e.title as event_title,
           s.start_time
    FROM applications a
    JOIN users u ON a.user_id = u.id
    JOIN events e ON a.event_id = e.id
    JOIN shifts s ON a.shift_id = s.id
    WHERE a.status = 'approved'
      AND u.telegram_user_id IS NOT NULL
      AND u.notifications_telegram = 1
      AND s.start_time BETWEEN datetime(?, 'unixepoch') AND datetime(?, 'unixepoch')
      AND NOT EXISTS (
        SELECT 1 FROM analytics_events ae 
        WHERE ae.event_type = 'reminder_24h_sent' 
          AND json_extract(ae.event_data, '$.application_id') = a.id
      )
  `).all(
    Math.floor(in24Hours.getTime() / 1000),
    Math.floor(in24HoursPlus15Min.getTime() / 1000)
  );

  console.log(`üì± –ù–∞–π–¥–µ–Ω–æ ${applications.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 24—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏`);

  for (const app of applications) {
    try {
      await sendNotification({
        user_id: app.user_id,
        event_id: app.event_id,
        application_id: app.id,
        shift_id: app.shift_id,
        type: "shift_reminder",
      });

      // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      db.query(`
        INSERT INTO analytics_events (user_id, event_type, event_data, created_at)
        VALUES (?, ?, ?, datetime('now'))
      `).run(
        app.user_id,
        "reminder_24h_sent",
        JSON.stringify({ application_id: app.id, event_title: app.event_title })
      );

      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 24—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ ${app.id}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 24—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ ${app.id}:`, error);
    }
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
 */
async function send2HourReminders(): Promise<void> {
  console.log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 2 —á–∞—Å–∞...");

  const now = new Date();
  const in2Hours = new Date(now.getTime() + 2 * 60 * 60 * 1000);
  const in2HoursPlus15Min = new Date(in2Hours.getTime() + 15 * 60 * 1000);

  const applications = db.query(`
    SELECT a.id, a.user_id, a.event_id, a.shift_id,
           u.telegram_user_id, u.notifications_telegram,
           e.title as event_title,
           s.start_time
    FROM applications a
    JOIN users u ON a.user_id = u.id
    JOIN events e ON a.event_id = e.id
    JOIN shifts s ON a.shift_id = s.id
    WHERE a.status = 'approved'
      AND u.telegram_user_id IS NOT NULL
      AND u.notifications_telegram = 1
      AND s.start_time BETWEEN datetime(?, 'unixepoch') AND datetime(?, 'unixepoch')
      AND NOT EXISTS (
        SELECT 1 FROM analytics_events ae 
        WHERE ae.event_type = 'reminder_2h_sent' 
          AND json_extract(ae.event_data, '$.application_id') = a.id
      )
  `).all(
    Math.floor(in2Hours.getTime() / 1000),
    Math.floor(in2HoursPlus15Min.getTime() / 1000)
  );

  console.log(`üì± –ù–∞–π–¥–µ–Ω–æ ${applications.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 2—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏`);

  for (const app of applications) {
    try {
      await sendNotification({
        user_id: app.user_id,
        event_id: app.event_id,
        application_id: app.id,
        shift_id: app.shift_id,
        type: "shift_reminder",
      });

      // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      db.query(`
        INSERT INTO analytics_events (user_id, event_type, event_data, created_at)
        VALUES (?, ?, ?, datetime('now'))
      `).run(
        app.user_id,
        "reminder_2h_sent",
        JSON.stringify({ application_id: app.id, event_title: app.event_title })
      );

      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 2—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ ${app.id}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 2—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ ${app.id}:`, error);
    }
  }
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–µ–∫–∞—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö—Å—è —Å–º–µ–Ω
 */
async function autoCheckoutFinishedShifts(): Promise<void> {
  console.log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö—Å—è —Å–º–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–µ–∫–∞—É—Ç–∞...");

  const now = new Date();
  const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);

  // –ù–∞—Ö–æ–¥–∏–º —Å–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —á–∞—Å –Ω–∞–∑–∞–¥, –Ω–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —á–µ–∫–∞—É—Ç
  const applications = db.query(`
    SELECT a.id, a.user_id, a.event_id,
           att.id as attendance_id,
           s.end_time,
           s.start_time,
           e.title as event_title
    FROM applications a
    JOIN attendance att ON a.id = att.application_id
    JOIN shifts s ON a.shift_id = s.id
    JOIN events e ON a.event_id = e.id
    WHERE a.status = 'approved'
      AND att.status = 'checked_in'
      AND s.end_time < datetime(?, 'unixepoch')
      AND NOT EXISTS (
        SELECT 1 FROM analytics_events ae 
        WHERE ae.event_type = 'auto_checkout' 
          AND json_extract(ae.event_data, '$.application_id') = a.id
      )
  `).all(Math.floor(oneHourAgo.getTime() / 1000));

  console.log(`‚è∞ –ù–∞–π–¥–µ–Ω–æ ${applications.length} —Å–º–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–µ–∫–∞—É—Ç–∞`);

  for (const app of applications) {
    try {
      const startTime = new Date(app.start_time);
      const endTime = new Date(app.end_time);
      const hoursWorked = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–µ–∫–∞—É—Ç
      db.query(`
        UPDATE attendance 
        SET status = 'checked_out', 
            checkout_at = datetime('now'),
            hours_worked = ?
        WHERE id = ?
      `).run(hoursWorked, app.attendance_id);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã
      await sendNotification({
        user_id: app.user_id,
        event_id: app.event_id,
        application_id: app.id,
        type: "shift_completed",
        data: {
          event_title: app.event_title,
          hours_worked: hoursWorked,
        },
      });

      // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–µ–∫–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω
      db.query(`
        INSERT INTO analytics_events (user_id, event_type, event_data, created_at)
        VALUES (?, ?, ?, datetime('now'))
      `).run(
        app.user_id,
        "auto_checkout",
        JSON.stringify({ 
          application_id: app.id, 
          event_title: app.event_title,
          hours_worked: hoursWorked 
        })
      );

      console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–µ–∫–∞—É—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ ${app.id}, —á–∞—Å–æ–≤: ${hoursWorked}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–µ–∫–∞—É—Ç–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ ${app.id}:`, error);
    }
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è cron-–∑–∞–¥–∞—á–∏
 */
async function runReminderCron(): Promise<void> {
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á –≤ ${new Date().toLocaleString("ru-RU")}`);

  try {
    await send24HourReminders();
    await send2HourReminders();
    await autoCheckoutFinishedShifts();
    
    console.log(`‚úÖ –í—Å–µ cron-–∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –≤ ${new Date().toLocaleString("ru-RU")}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cron-–∑–∞–¥–∞—á:", error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.main) {
  await runReminderCron();
}

export { runReminderCron };
